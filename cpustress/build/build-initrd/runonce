#!/bin/sh
# CPU stress test boot disk version 2 by Gert Hulselmans
#
# This version is designed from scratch. Only 10 lines of code were taken
# from the CPU stress test boot disk version 1, made by Adrian Stanciu
# <adrian@sadyc.net>.
#
#
# Licensed under the GNU General Public License, version 2 or later.
# This program comes with ABSOLUTELY NO WARRANTY. See the GNU GPL for details:
# <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html>
#
# Written by Gert Hulselmans and Explorer.
# Last updated on 1 November 2014.


set -m
export PATH='/sbin:/bin:/usr/bin:/usr/local/bin'

# Check if this script is run for the first time or not.
# If not, run only '/bin/sh'.

if [ ! -e /tmp/firstrun ]; then
    printf '' > /tmp/firstrun

    clear

    printf "\033[01;34m\n"
    cat << 'CPUSTRESS_TEXT'
  ____ ____  _   _     _                       _            _           ____
 / ___|  _ \| | | |___| |_ _ __ ___  ___ ___  | |_ ___  ___| |_  __   _|___ \
| |   | |_) | | | / __| __| '__/ _ \/ __/ __| | __/ _ \/ __| __| \ \ / / __) |
| |___|  __/| |_| \__ \ |_| | |  __/\__ \__ \ | ||  __/\__ \ |_   \ V / / __/
 \____|_|    \___/|___/\__|_|  \___||___/___/  \__\___||___/\__|   \_/ |_____|

CPUSTRESS_TEXT
    printf "\033[0;37m                 development    \033[01;37mbootable image by Gert Hulselmans and Explorer\033[0m\n\n"
    printf "                            To \033[0;32mreboot\033[0m, press: '\033[0;31m<Ctrl> + <Alt> + <Del>\033[0m'\n"
    printf "                    To \033[0;32mquit\033[0m a program, press: '\033[0;31m<Ctrl> + C\033[0m' or '\033[0;31mq\033[0m'\n"
    printf "To switch to another \033[0;32mvirtual terminal\033[0m, press: '\033[0;31m<Alt> + <Left / Right>\033[0m'\n\n"

    KERNEL_ARGS=`awk '{sub(/BOOT_IMAGE=/, "", $0); print}' /proc/cmdline`

    # Wrap the $KERNEL_ARGS variable. Output at least 2 lines.
    echo "$KERNEL_ARGS" | awk \
        '{printf("\033[01;37mKernel args:\033[0m %s\n", substr($0, 1, 67));
          printf("             %s\n", substr($0, 68, 67));
          for (i = 135; i <= length($0); i += 67)
              printf("             %s\n", substr($0, i, 67))}'

    printf "\033[01;37mUBCD args:\033[0m   $ubcdcmd $ubcdargs\n\n"

    VENDOR=`awk '/^vendor_id/ {for (i = 3; i < NF; i++) printf("%s ", $i); print $NF; exit}' /proc/cpuinfo`
    CPU_MODEL=`awk '/^model name/ {for (i = 4; i <= NF; i++) printf("%s ", $i); printf("\n"); exit}' /proc/cpuinfo`
    CPUS=`awk '/^processor/ {CPU=$3}; END {print CPU+1}' /proc/cpuinfo`

    if [ "$CPUS" -eq 1 ]; then
        printf "You have \033[01;37m1\033[0m CPU in your system.\n"
    else
        printf "You have \033[01;37m$CPUS\033[0m CPUs in your system.\n"
    fi

    printf "  ==>  $VENDOR $CPU_MODEL\n\n"

    # Pause for 30 seconds to make it possible to read the text on the screen.
    # Pressing any key will result in immediate execution of the rest of the script.

    printf "Press any key to continue directly.\n"
    KEYPRESS=none
    for i in `seq 30 -1 1`; do
        if [ "$i" -eq 1 ]; then
            printf "  Booting will start automatically in \033[01;37m1\033[0m second.  \r"
        else
            printf "  Booting will start automatically in \033[01;37m$i\033[0m seconds.  \r"
        fi

        read -s -n1 -t 1 KEYPRESS
        if [ "X$KEYPRESS" != Xnone ]; then
            break
        fi
    done
    printf "\n\n"

    case "$ubcdcmd" in
        burn)
            burn $ubcdargs
            ;;
        cpuburn-m | cpuburn-in)
            cpuburn-m
            ;;
        cpuinfo)
            cpuinfo
            ;;
        dmesg)
            dmesg | less -M
            ;;
        helpinfo)
            helpinfo $ubcdargs
            ;;
        linpack)
            printf "\033[0;32m\nStarting 'Intel Optimized LINPACK 11.2.0'  (linpack).\033[0m\n"
            linpack
            ;;
        menu)
            menu
            ;;
        mprime)
            mprime $ubcdargs
            ;;
        mprime23)
            mprime 23 $ubcdargs
            ;;
        mprime28)
            mprime 28 $ubcdargs
            ;;
        sensors)
            sensors $ubcdargs
            ;;
        stress)
            stress $ubcdargs
            case "$ubcdargs" in
                "" | -? | --help)
                    echo "Press any key to continue."
                    read -s -n1 REPLY
                    ;;
            esac
            ;;
        stresscpu2)
            printf "\033[0;32m\nStarting 'CPU stress tester 2.0'   (stresscpu2).\033[0m\n"
            stresscpu2 $ubcdargs
            ;;
        systester | systester-cli)
            printf "\033[0;32m\nStarting 'System Stability Tester 1.5.1'   (systester).\033[0m\n"
            systester-cli $ubcdargs
            printf "Test completed. Type '\033[01;37msystester-cli -help\033[0m' for other test options.\n"
            ;;
        uname)
            printf "\033[01;37m'uname -a' result:\033[0m\n"
            uname -a
            ;;
        *)
            printf "\nNot recognised UBCD args: '$ubcdcmd'.\n"
            ;;
    esac

    printf "\r\n"
    printf "\n\nType '\033[01;37mhelpinfo\033[0m' to see which programs are available.\n"
    printf "Type '\033[01;37mmenu\033[0m' to select the available programs from a list.\n\n"
    printf "Use '\033[0;31m<Alt> + <Left / Right>\033[0m', to switch to the other virtual terminals.\n\n"
    printf "To \033[0;32mreboot\033[0m, press: '\033[0;31m<Ctrl> + <Alt> + <Del>\033[0m' or type '\033[01;37mreboot\033[0m'.\n"
    printf "To \033[0;32mshutdown\033[0m, type '\033[01;37mpoweroff\033[0m'.\n"
fi

# Run bash shell after the commands above are executed once.
exec /bin/sh --login
