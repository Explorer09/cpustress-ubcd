#!/bin/sh
#
# Wrapper for CPUburn-in
# ======================
#
# It automatically detects the number of CPUs to stress them all at the same
# time. This requires to run multiple instances of cpuburn-in, because 1
# process can only be executed on 1 CPU.
#
#
# Licensed under the GNU General Public License, version 2 or later.
# This program comes with ABSOLUTELY NO WARRANTY. See the GNU GPL for details:
# <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html>
#
# Written by Gert Hulselmans and Explorer.
# Last updated on 2 January 2017.


set -m
CPUS=`awk '/^processor/ {CPU=$3}; END {print CPU+1}' /proc/cpuinfo`

# We expect 'read' may be interrupted by a signal. Bash's 'read' blocks signals
# instead.
if [ "X$BASH" != X ]; then
    echo "Don't run this script in bash." >&2
    exit 1
fi

printf "\033[0;32mCPU Burn-in v1.00:\n"
printf "==================\033[0m\n\n"

case $1 in
    --help | -h)
        cat << HELP
Usage: $0 [TIME]

Run cpuburn-in and stress test for TIME minutes.
If TIME is not specified, run cpuburn-in for 10080 minutes (= 7 days).

To specify how many instances of cpuburn-in will be run, export the 'instances'
shell variable before running this script. e.g. 'export instances=1'
HELP
        exit 0
        ;;
esac

# $days, $hours, and $minutes are environment variables as well as boot
# parameters.
if [ "X$1" != X ]; then
    TIME=$1
elif [ "X$days" != X ]; then
    TIME=$((days*24*60))
elif [ "X$hours" != X ]; then
    TIME=$((hours*60))
elif [ "X$minutes" != X ]; then
    TIME=$minutes
else
    TIME=10080
fi

if [ "$instances" -gt 0 ] 2>/dev/null; then
    :
else
    echo "Detecting the number of CPUs: $CPUS detected."
    instances=$CPUS
fi

if [ "$instances" -eq 1 ]; then
    echo "Running 1 instance of cpuburn-in ('/opt/cpuburn-in/cpuburn-in $TIME')."
    exec /opt/cpuburn-in/cpuburn-in $TIME
else
    echo "$instances instances of cpuburn-in will be run in the background."
    printf "\033[01;31mTo stop cpuburn-in, press any key.\033[0m\n"
    PID_LIST=""
    trap 'trap - CHLD; trap "" 1 2 3 15; kill $PID_LIST; trap - 1 2 3 15; wait; exit 0' 1 2 3 15
    for i in `seq 1 $instances`; do
        echo "cpuburn-m: Starting instance $i of cpuburn-in ('/opt/cpuburn-in/cpuburn-in $TIME &')."
        /opt/cpuburn-in/cpuburn-in $TIME & PID_LIST="$PID_LIST $!"
    done
    trap 'trap - 1 2 3 15 CHLD; wait; exit 0' CHLD
    read -s -n1 REPLY # May be interrupted by a SIGCHLD.
    echo "cpuburn-m: Terminating."
    trap - CHLD; trap '' 1 2 3 15; kill $PID_LIST; trap - 1 2 3 15; wait; exit 0
fi
