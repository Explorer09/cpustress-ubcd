#!/bin/sh
#
# Wrapper for CPUburn-in
# ======================
#
# It automatically detects the number of CPUs to stress them all at the same
# time. This requires to run multiple instances of cpuburn-in, because 1
# process can only be executed on 1 CPU.
#
#
# Licensed under the GNU General Public License, version 2 or later.
#
# This program comes with ABSOLUTLY NO WARRANTY. See the GNU GPL for details:
# <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html>
#
#
# Written by Gert Hulselmans and Explorer.
# Last updated on 16 April 2013.


set -m
CPUS=`awk '/^processor/ {CPU=$3}; END {print CPU+1}' /proc/cpuinfo`
CHLD_COUNT=0

sigchld_handler () {
    trap - 17
    CHLD_COUNT="$(($CHLD_COUNT+1))"
    if [ "$CHLD_COUNT" -ge "$instances" ]; then
        trap - 1 2 3 15
        exit 0;
    fi
    trap 'sigchld_handler' 17
    read -s -n1 REPLY
}

printf '\033[0;32mCPU Burn-in v1.00:\n'
printf '==================\033[0m\n\n'

# $days, $hours, and $minutes are global variables and boot parameters.
if [ "X$1" != "X" ]; then
    time="$1"
elif [ "X$days" != "X" ]; then
    time="$(($days*24*60))"
elif [ "X$hours" != "X" ]; then
    time="$(($hours*60))"
elif [ "X$minutes" != "X" ]; then
    time="$minutes"
else
    time="10080"
fi

printf 'Detecting the number of CPUs: '
if [ "$CPUS" -eq "1" ]; then
    printf '\033[01;37m1\033[0m CPU detected.\n'
else
    printf "\033[01;37m$CPUS\033[0m CPUs detected.\n"
fi
# "$instances" is a global variable that may be specified as a boot parameter.
if [ "X$instances" = "X" ]; then
    instances="$CPUS"
fi

PID_LIST=""
trap 'trap - 1 2 3 15 17; kill $PID_LIST; exit 0' 1 2 3 15

if [ "$instances" -eq "1" ]; then
    printf "Running 1 instance of cpuburn-in ('/opt/cpuburn/cpuburn-in $time').\n"
    /opt/cpuburn/cpuburn-in $time
else
    printf "To stress all CPUs, $instances instances of cpuburn-in will be run in the background.\n\n"
    printf '\033[01;31mTo stop cpuburn-in, press any key.\033[0m\n'

    for i in `seq 1 $instances`; do
        printf "cpuburn: Starting instance $i of cpuburn-in ('/opt/cpuburn/cpuburn-in $time &').\n"
        /opt/cpuburn/cpuburn-in $time &
        PID_LIST="$PID_LIST $!"
    done

    trap 'sigchld_handler' 17
    # This 'read' may be interrupted by a SIGCHLD.
    read -s -n1 REPLY

    trap - 17
    kill $PID_LIST
fi

trap - 1 2 3 15 17
exit 0
