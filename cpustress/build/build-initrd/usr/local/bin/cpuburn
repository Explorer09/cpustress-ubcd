#!/bin/sh
#
# Wrapper for CPUburn-in
# ======================
#
# It automaticly detects the number of CPUs to stress them all at the same time.
# This requires to run multiple instances of cpuburn-in, because 1 process can
# only be executed on 1 CPU.
#
#
# Licensed under the GNU General Public License, version 2 or later.
#
# This program comes with ABSOLUTLY NO WARRANTY. See the GNU GPL for details:
# <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html>
#
#
# Written by Gert Hulselmans and Explorer.
# Last updated on 12 April 2013.


CPUS=`awk '/^processor/ {CPU=$3}; END {print CPU+1}' /proc/cpuinfo`

printf '\033[0;32mCPU Burn-in v1.00:\n'
printf '==================\033[0m\n\n'

if [ "X$1" != "X" ]; then
    time="$1"
elif [ "X$days" != "X" ]; then
    time=`expr $days \* 24 \* 60`
elif [ "X$hours" != "X" ]; then
    time=`expr $hours \* 60`
elif [ "X$minutes" != "X" ]; then
    time="$minutes"
else
    time="10080"
fi

trap 'pkill cpuburn-in; trap - 1 2 3 15; exit 0' 1 2 3 15

printf 'Detecting the number of CPUs: '

if [ "$CPUS" -eq "1" ]; then
    printf '\033[01;37m1\033[0m CPU detected.\n'
    echo "Running 1 instance of cpuburn-in ('/opt/cpuburn/cpuburn-in $time')."
    /opt/cpuburn/cpuburn-in $time
else
    printf "\033[01;37m$CPUS\033[0m CPUs detected.\n"
    echo "To stress all CPUs, $CPUS instances of cpuburn-in will be run in the background."
    echo
    printf '\033[01;31mTo stop cpuburn-in, press any key.\033[0m\n'

    for i in `seq 1 $CPUS`; do
        echo "cpuburn: Starting instance $i of cpuburn-in ('/opt/cpuburn/cpuburn-in $time &')."
        /opt/cpuburn/cpuburn-in $time &
    done

    read -s -n1 REPLY
    pkill cpuburn-in
fi

trap - 1 2 3 15
