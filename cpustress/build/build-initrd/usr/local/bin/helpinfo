#!/bin/sh
#
# HELPINFO
# ========
#
# Gives info about the CPU stress programs and for the BusyBox multi-call
# binary.
#
#
# Licensed under the GNU General Public License, version 2 or later.
# This program comes with ABSOLUTELY NO WARRANTY. See the GNU GPL for details:
# <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html>
#
# Written by Gert Hulselmans and Explorer.
# Last updated on 20 June 2014.


LAST_EDITED="20 June 2014"

showcontrols () {
    printf "Use '\033[0;31m<SPACE>\033[0m', '\033[0;31m<PageUp>\033[0m', '\033[0;31m<PageDown>\033[0m', '\033[0;31m<Up>\033[0m' and '\033[0;31m<Down>\033[0m' to move through\n"
    printf "the text. Press '\033[0;31mq\033[0m' to quit '\033[01;37mhelpinfo\033[0m'.\n\n"
    printf "Press any key to display the help text.\n\n"
    read -s -n1 REPLY
}

mkdir -p /tmp/helpinfo

NUM_SPACES=$((28-${#LAST_EDITED}/2))
SPACES=`printf '%*s' $NUM_SPACES ''`

if [ "X$1" = X ]; then
    cat > /tmp/helpinfo/helpinfo.txt << HELPINFO

                            ##################
                            #    HELPINFO    #
                            ##################

                        Written by Gert Hulselmans
${SPACES}Last time edited: ${LAST_EDITED}

'helpinfo' displays the help text in such a way so that you can easily navigate
through it.

Use '<SPACE>', '<PageUp>', '<PageDown>', '<Up>' and '<Down>' to navigate
through the text. Press 'q' to quit 'helpinfo'.


Some general commands for all programs:
                            To reboot, press: '<Ctrl> + <Alt> + <Del>'
                    To quit a program, press: '<Ctrl> + C' or 'q'
To switch to another virtual terminal, press: '<Alt> + <Left/Right>'


'top' is a useful program to see the percentage of processing power used by a
specific program. When you run a CPU stress test, you will see that the total
percentage of the processing power is 100%.
    To quit 'top', you have to press 'q' or '<Ctrl> + C'.


By typing 'menu' at the terminal window, you will get a menu from which you can
select the following programs:
        - CPUburn v1.4a                   (burn)
        - CPU Burn-in v1.00               (cpuburn-in)
        - CPUinfo v1.00                   (cpuinfo)
        - Helpinfo                        (helpinfo)
        - Intel Optimized LINPACK 11.1.3  (linpack)
        - Mersenne Prime test v23.9.2     (mprime 23)
        - Mersenne Prime test v27.9       (mprime 27)
        - Sensors v3.3.5                  (sensors)
        - Stress v1.0.4                   (stress)
        - CPU stress tester 2.0           (stresscpu2)
        - System Stability Tester 1.5.1   (systester)



Help is available for the following executables:
  * CPU stress and info tools:
        - CPUburn v1.4a                   (burn)
        - CPU Burn-in v1.00               (cpuburn-in)
        - CPUinfo v1.00                   (cpuinfo)
        - Helpinfo                        (helpinfo)
        - Intel Optimized LINPACK 11.1.3  (linpack)
        - Mersenne Prime test             (mprime)
        - Sensors v3.3.5                  (sensors)
        - Stress v1.0.4                   (stress)
        - CPU stress tester 2.0           (stresscpu2)
        - System Stability Tester 1.5.1   (systester)

  * Executables from the busybox packet:
HELPINFO

    busybox | awk 'NR==16,NR==EOF' >> /tmp/helpinfo/helpinfo.txt

    cat >> /tmp/helpinfo/helpinfo.txt << HELPINFO2
If you want help for one of the programs above, for example 'CPU Burn-in
v1.00', run 'helpinfo cpuburn-in' in the terminal.


To run Helpinfo from the isolinux commandline, use the following:

    COM32  linux.c32 /ubcd/boot/cpustress/bzImage
    INITRD /ubcd/boot/cpustress/initrd.xz
    APPEND noapic ubcdcmd=helpinfo


To run Helpinfo for a specific program from the isolinux commandline (e.g.:
cpuburn-in), use the following:

    COM32  linux.c32 /ubcd/boot/cpustress/bzImage
    INITRD /ubcd/boot/cpustress/initrd.xz
    APPEND noapic ubcdcmd=helpinfo ubcdargs=cpuburn-in
HELPINFO2
    exec less -~ /tmp/helpinfo/helpinfo.txt
else
    printf "\n"
    printf "\033[0;32m                            ##################\n"
    printf "                            #    HELPINFO    #\n"
    printf "                            ##################\033[0m\n"
    printf "\n"
    printf "                        Written by Gert Hulselmans\n"
    printf "${SPACES}Last time edited: ${LAST_EDITED}\n"
    printf "\n"
    printf "'\033[01;37mhelpinfo\033[0m' displays the help text in such a way so that you can easily navigate\n"
    printf "through it.\n"
    printf "\n"

    case "$1" in
        burn)
            showcontrols
            exec less -~ /opt/burn/burn.txt
            ;;
        cpuburn-m | cpuburn-in)
            showcontrols
            exec less -~ /opt/cpuburn-in/cpuburn-in.txt
            ;;
        cpuinfo)
            showcontrols
            exec less -~ /opt/cpuinfo/cpuinfo.txt
            ;;
        help | helpinfo | -h | --help)
            showcontrols
            exec helpinfo
            ;;
        linpack)
            showcontrols
            exec less -~ /opt/linpack/xhelp.lpk
            ;;
        mprime)
            showcontrols
            exec less -~ /opt/mprime/mprime.txt
            ;;
        sensors)
            showcontrols
            exec less -~ /opt/sensors/sensors.txt
            ;;
        stress)
            showcontrols
            exec less -~ /opt/stress/stress.txt
            ;;
        stresscpu2)
            showcontrols
            stresscpu2 -h > /tmp/helpinfo/stresscpu2.txt
            cat >> /tmp/helpinfo/stresscpu2.txt << CMDSTRESSCPU2
Passing options to stresscpu2 through the isolinux commandline
**************************************************************

If you want to run stresscpu2 with specific parameters, when you boot the
image, use something similar to:

    COM32  linux.c32 /ubcd/boot/cpustress/bzImage
    INITRD /ubcd/boot/cpustress/initrd.xz
    APPEND noapic ubcdcmd=stresscpu2 ubcdargs="-s -t 48:00:00"

The ubcdargs parameter contains the options that you want to pass to
stresscpu2.
CMDSTRESSCPU2
            exec less -~ /tmp/helpinfo/stresscpu2.txt
            ;;
        systester | systester-cli)
            showcontrols
            systester-cli -help > /tmp/helpinfo/systester.txt
            cat >> /tmp/helpinfo/systester.txt << CMDSYSTESTER

If you want to run systester with specific parameters, when you boot the image,
use something similar to:

    COM32  linux.c32 /ubcd/boot/cpustress/bzImage
    INITRD /ubcd/boot/cpustress/initrd.xz
    APPEND noapic ubcdcmd=systester ubcdargs="-gausslg 1M -threads 2 -bench"

The ubcdargs parameter contains the options that you want to pass to systester.
CMDSYSTESTER
            exec less -~ /tmp/helpinfo/systester.txt
            ;;
        *)
            EXE=`which -- "$1"`
            if [ -x "$EXE" ]; then
                showcontrols
                "$EXE" --help 2>&1 | less -~
            else
                printf "'\033[01;37m$1\033[0m' is no executable and therefore there is no help text.\n"
                printf "See '\033[01;37mhelpinfo\033[0m' for which executables are supported.\n"
            fi
            ;;
    esac
fi
