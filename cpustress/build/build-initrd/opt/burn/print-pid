#!/bin/sh
#
# print-pid
# =========
#
# Runs a specified command and prints its process ID and exit status.
# Useful for Redelmeier's cpuburn programs which print nothing to stdout.
#
#
# Licensed under the GNU General Public License, version 2 or later.
# This program comes with ABSOLUTELY NO WARRANTY. See the GNU GPL for details:
# <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html>
#
# Written by Explorer.
# Last updated on 17 September 2016.


set +m

print_status_and_exit () {
    trap - 1 2 3 14 15 USR1 USR2 CONT TSTP TTOU
    SIG=""
    [ "$1" -gt 128 ] && [ "$1" -le 159 ] && SIG=" (`kill -l "$1"`)"
    echo "print-pid: [`date +'%b %d %T'`] PID $PID exited with status $1$SIG."
    exit "$1"
}

if [ "X$1" = X ] || [ "X$1" = X--help ]; then
    echo "Usage: $0 COMMAND [ARGS]"
    exit 1
fi

if [ -x "`which -- "$1"`" ]; then
    # User-defined signals will be propagated transparently to child.
    # Don't terminate or stop upon stdio-related signals. This parent shall
    # concentrate on waiting. If the child dies or stops upon any of such
    # signal on its own, so be it.
    # The shell can 'wait' for stopped processes when job control is NOT
    # active, otherwise the 'wait' builtin returns early. (This behavior isn't
    # well documented. Beware.)
    trap '' USR1 USR2 PIPE TTIN TTOU XFSZ
    "$@" & PID=$!
    trap 'trap - 2 3 14 15; kill $PID; kill -s CONT $PID; wait $PID; print_status_and_exit $?' 2 3 14 15
    trap 'trap - HUP; kill -s HUP $PID $$' HUP
    for s in USR1 USR2 CONT; do
        trap 'kill -s '$s' $PID; wait $PID; print_status_and_exit $?' $s
    done
    trap 'kill -s TSTP $PID; kill -s STOP $$' TSTP
    echo "print-pid: [`date +'%b %d %T'`] PID $PID, '$@ &' started."
    wait $PID; print_status_and_exit $?
else
    echo "print-pid ERROR: '$1' is not executable." >&2
    echo "Usage: $0 COMMAND [ARGS]" >&2
    exit 1
fi
