28 April 2016

The compilers in Ubuntu (or other modern Linux distros) are configured to
generate i686-only code by default. If you compile programs with the native
toolchain, the programs may not work with older CPUs due to new instructions
like CMOV. Although for some programs you may avoid the problem by specifying
'-march' compiler flag (Linux kernel and BusyBox did this automatically), the
main C library cannot be built this way. As the C library depends on several
compiled code in libgcc, building it to work with i486 CPUs requires building
the whole toolchain. This document describes how to build a cross-toolchain for
CPUstress image.

I build this toolchain on Ubuntu 12.04.5 LTS (64-bit). Other distros are not
tested.

This document assumes that you are familiar with the build process of GNU
toolchain, thus many explanations of the command-line options are omitted.

The build process is similar to the one described in "EGLIBC.cross-building"
document in the EGLIBC source. For explanation of each step, it is good to read
the document before building the tools below.

For beginners, the Linux From Scratch <http://www.linuxfromscratch.org/lfs/>
book is also useful. However, there are differences in the procedure between
in the book and below, which are noted.

This document may be converted to a workable shell script. To do this, run
"doc-to-sh.sh".

First, prepare an empty directory for building the toolchain:

 $ mkdir toolchain || exit 1
 $ cd toolchain

Preparation
-----------

 $ download () {
     wget http://ftp.gnu.org/gnu/binutils/binutils-2.26.tar.bz2
     wget https://gmplib.org/download/gmp/gmp-6.1.0.tar.xz
     wget -O gmp-67d4ee9dead1.patch \
       https://gmplib.org/repo/gmp-6.1/raw-rev/67d4ee9dead1
     wget http://www.mpfr.org/mpfr-current/mpfr-3.1.4.tar.xz
     wget -O mpfr-allpatches.patch http://www.mpfr.org/mpfr-current/allpatches
     wget ftp://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz
     wget ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.16.1.tar.bz2
     wget ftp://ftp.gnu.org/gnu/gcc/gcc-6.1.0/gcc-6.1.0.tar.bz2
     wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.5.2.tar.xz
     svn export http://www.eglibc.org/svn/branches/eglibc-2_19/libc/
     }
 $ extract () {
     tar -x --bzip2 -f binutils-2.26.tar.bz2
     tar -x --xz -f gmp-6.1.0.tar.xz
     tar -x --xz -f mpfr-3.1.4.tar.xz
     tar -x -z -f mpc-1.0.3.tar.gz
     tar -x --bzip2 -f isl-0.16.1.tar.bz2
     tar -x --bzip2 -f gcc-6.1.0.tar.bz2
     tar -x --xz -f linux-4.5.2.tar.xz
     mv gmp-6.1.0  gcc-6.1.0/gmp
     mv mpfr-3.1.4 gcc-6.1.0/mpfr
     mv mpc-1.0.3  gcc-6.1.0/mpc
     mv isl-0.16.1 gcc-6.1.0/isl
     }

 $ download
 $ extract
 $ for i in binutils-2.26 gcc-6.1.0 linux-4.5.2 libc
     do [ -d "$i" ] || exit 1 ; done

Copy the "option-groups.config" file from the compile-notes directory to
the current directory where we have the source code. (You need to do this
manually - the script can't locate where the file is.)

 $ [ -f option-groups.config ] || exit 1

Apply an official patch for GMP:

 $ cd gcc-6.1.0/gmp
 $ patch -p 1 < ../../gmp-67d4ee9dead1.patch
 $ cd ../..

Apply the official cumulative patch for MPFR:
(Note: the version of latest MPFR patch before this build is 3.1.4-p1.)

 $ cd gcc-6.1.0/mpfr
 $ patch -p 1 < ../../mpfr-allpatches.patch
 $ cd ../..

Make 'sysroot' and 'tools' directories:

 $ mkdir sysroot    # This stores i486 target libraries and include files.
 $ mkdir sysroot64  # This stores x86_64 target libraries and include files.
 $ mkdir tools      # This stores the cross-compile tools (binutils & GCC).
 $ SYSROOT_DIR="${PWD}/sysroot"
 $ SYSROOT64_DIR="${PWD}/sysroot64"
 $ TOOLS_DIR="${PWD}/tools"

Add the 'tools' directory to PATH, so that our cross tools (binutils & GCC) can
be found as soon as they are available.

 $ export PATH="${TOOLS_DIR}/bin:${PATH}"

All of the binutils, GCC, and glibc documentation recommend building them in a
separate build directory (while glibc REQUIRES that), so make the build
directories:

 $ mkdir binutils-build gcc-build eglibc-build

Note that we will clean up the build directories (make -k distclean ; rm -r *)
as soon as they are no longer needed.

1. Cross-binutils
-----------------

 $ cd binutils-build

In case that the output of config.guess matches the system type we specify in
--target (or --host later for building libc), we hack the string so that
configure will always build cross tools and not native ones:

 $ BUILD=$(../binutils-2.26/config.guess | sed -e 's/-pc-/-buildpc-/')

 $ ../binutils-2.26/configure --prefix="${TOOLS_DIR}" --build=${BUILD} \
     --target=i486-pc-linux-gnu --with-sysroot="${SYSROOT_DIR}"
 $ make
 $ make install
 $ make -k distclean
 $ rm -r *

 $ ../binutils-2.26/configure --prefix="${TOOLS_DIR}" --build=${BUILD} \
     --target=x86_64-pc-linux-gnu --with-sysroot="${SYSROOT64_DIR}"
 $ make
 $ make install
 $ make -k distclean
 $ rm -r *

 $ cd ..

2. Cross-GCC without libc headers
---------------------------------

These target libraries cannot be built because we have no libc in the target
system. Disable these until we have EGLIBC in the final build of GCC:  (If you
have GCC 4.8 or older, you should also --disable-libmudflap .)

 $ DISABLE_TARGET_LIBS="
     --disable-libstdc++-v3 --disable-libsanitizer --disable-libvtv
     --disable-libcilkrts --disable-libssp --disable-libquadmath
     --disable-libgomp --disable-libitm --disable-libatomic"

 $ cd gcc-build
 $ BUILD=$(../gcc-6.1.0/config.guess | sed -e 's/-pc-/-buildpc-/')

 $ ../gcc-6.1.0/configure --prefix="${TOOLS_DIR}" --build=${BUILD} \
     --target=i486-pc-linux-gnu --enable-languages=c,c++ \
     --disable-shared --disable-threads \
     --disable-bootstrap --disable-multilib ${DISABLE_TARGET_LIBS} \
     --without-headers --with-newlib \
     --with-sysroot="${SYSROOT_DIR}" --with-arch-32=i486 --with-tune=generic
 $ make
 $ make install-strip
 $ make -k distclean
 $ rm -r *

 $ ../gcc-6.1.0/configure --prefix="${TOOLS_DIR}" --build=${BUILD} \
     --target=x86_64-pc-linux-gnu --enable-languages=c,c++ \
     --disable-shared --disable-threads \
     --disable-bootstrap --disable-multilib ${DISABLE_TARGET_LIBS} \
     --without-headers --with-newlib \
     --with-sysroot="${SYSROOT64_DIR}" --with-arch-32=i486 --with-tune=generic
 $ make
 $ make install-strip
 $ make -k distclean
 $ rm -r *

 $ cd ..

Notes:
* The --disable-libstdcxx option doesn't seem to work, so here I use the old,
  undocumented option --disable-libstdc++-v3 instead.
* The --with-arch-32=i486 and --with-tune=generic options ensure that the new
  target code compiled after this new compiler will support i486 (-march=i486)
  and be tuned for generic CPUs (-mtune=generic) by default.
* Without libc headers, the TARGET_LIBC_PROVIDES_SSP macro should be undefined
  (in "gcc/auto-host.h") now. Trying to build glibc at this time will result in
  "undefined reference to __stack_chk_guard" error. Linux From Scratch solves
  this by adding "gcc_cv_libc_provides_ssp=yes" into GCC's configure script
  (a hack). The --with-glibc-version option (new in GCC 4.9) was also designed
  to solve this problem and allow glibc to be built with the initial compiler
  (with no libc headers or shared libgcc). However, the libc binaries built
  with the initial compiler is not bit-identical to the binaries rebuilt later,
  so I don't take either approach.

3. Linux kernel headers for libc
--------------------------------

 $ cd linux-4.5.2
 $ make mrproper
 $ make INSTALL_HDR_PATH="${SYSROOT_DIR}/usr" headers_install
 $ make INSTALL_HDR_PATH="${SYSROOT64_DIR}/usr" headers_install
 $ cd ..

4. EGLIBC headers and startup files
-----------------------------------

 $ cd eglibc-build
 $ BUILD=$(../libc/scripts/config.guess | sed -e 's/-pc-/-buildpc-/')

 $ cp ../option-groups.config .
 $ ../libc/configure --prefix=/usr --libexecdir=/usr/lib --build=${BUILD} \
     --host=i486-pc-linux-gnu --enable-kernel=2.6.36 --enable-add-ons=nptl \
     --disable-nscd --disable-profile --without-gd --without-selinux \
     --with-headers="${SYSROOT_DIR}/usr/include"

Install libc headers:

 $ make install-headers install-bootstrap-headers=yes \
     install_root="${SYSROOT_DIR}"

Make startup files (crt*.o):

 $ make csu/subdir_lib
 $ mkdir "${SYSROOT_DIR}/usr/lib"
 $ cp csu/crt*.o "${SYSROOT_DIR}/usr/lib"

Make dummy libc.so:

 $ i486-pc-linux-gnu-gcc -nostdlib -shared -x c /dev/null \
     -o "${SYSROOT_DIR}/usr/lib/libc.so"

 $ make -k distclean
 $ rm -r *

Do the same for x86_64:

 $ cp ../option-groups.config .
 $ ../libc/configure --prefix=/usr --libexecdir=/usr/lib --build=${BUILD} \
     --host=x86_64-pc-linux-gnu --enable-kernel=2.6.36 --enable-add-ons=nptl \
     --disable-nscd --disable-profile --without-gd --without-selinux \
     --with-headers="${SYSROOT64_DIR}/usr/include"

 $ make install-headers install-bootstrap-headers=yes \
     install_root="${SYSROOT64_DIR}"

 $ make csu/subdir_lib
 $ mkdir "${SYSROOT64_DIR}/usr/lib" "${SYSROOT64_DIR}/usr/lib64"
 $ cp csu/crt*.o "${SYSROOT64_DIR}/usr/lib64"

 $ x86_64-pc-linux-gnu-gcc -nostdlib -shared -x c /dev/null \
     -o "${SYSROOT64_DIR}/usr/lib64/libc.so"

 $ make -k distclean
 $ rm -r *

 $ cd ..

Note:
* "${SYSROOT64_DIR}/usr/lib" _must_ be created even though it's empty at this
  step, otherwise the absence of the directory will hinder the library search
  for the compiler that will be built later. (It searches "usr/lib/../lib64"
  instead of "usr/lib64" directly.)

5. Cross-GCC for building libc
------------------------------

Note the option '--enable-shared=libgcc'.

 $ cd gcc-build
 $ BUILD=$(../gcc-6.1.0/config.guess | sed -e 's/-pc-/-buildpc-/')

 $ ../gcc-6.1.0/configure --prefix="${TOOLS_DIR}" --build=${BUILD} \
     --target=i486-pc-linux-gnu --enable-languages=c,c++ \
     --enable-shared=libgcc --disable-threads \
     --disable-bootstrap --disable-multilib ${DISABLE_TARGET_LIBS} \
     --with-sysroot="${SYSROOT_DIR}" --with-arch-32=i486 --with-tune=generic
 $ make
 $ make install-strip
 $ make -k distclean
 $ rm -r *

 $ ../gcc-6.1.0/configure --prefix="${TOOLS_DIR}" --build=${BUILD} \
     --target=x86_64-pc-linux-gnu --enable-languages=c,c++ \
     --enable-shared=libgcc --disable-threads \
     --disable-bootstrap --disable-multilib ${DISABLE_TARGET_LIBS} \
     --with-sysroot="${SYSROOT64_DIR}" --with-arch-32=i486 --with-tune=generic
 $ make
 $ make install-strip
 $ make -k distclean
 $ rm -r *

 $ cd ..

6. EGLIBC, (mostly) full
------------------------

With "option-groups.config", this build of libc will have functionality just
enough for CPUstress and won't fit for everything. Please read "glibc.txt" for
more information. For example, this libc cannot be used to bootstrap a native
GCC compiler (a cross-compiler is fine, though).

 $ cd eglibc-build
 $ BUILD=$(../libc/scripts/config.guess | sed -e 's/-pc-/-buildpc-/')

 $ cp ../option-groups.config .
 $ ../libc/configure --prefix=/usr --libexecdir=/usr/lib --build=${BUILD} \
     --host=i486-pc-linux-gnu --enable-kernel=2.6.36 --enable-add-ons=nptl \
     --disable-nscd --disable-profile --without-gd --without-selinux \
     --with-headers="${SYSROOT_DIR}/usr/include"
 $ make
 $ make install install_root="${SYSROOT_DIR}"
 $ make -k distclean
 $ rm -r *

 $ cp ../option-groups.config .
 $ ../libc/configure --prefix=/usr --libexecdir=/usr/lib --build=${BUILD} \
     --host=x86_64-pc-linux-gnu --enable-kernel=2.6.36 --enable-add-ons=nptl \
     --disable-nscd --disable-profile --without-gd --without-selinux \
     --with-headers="${SYSROOT64_DIR}/usr/include"
 $ make
 $ make install install_root="${SYSROOT64_DIR}"
 $ make -k distclean
 $ rm -r *

 $ cd ..

7. Cross-GCC, full
------------------

This build of GCC enables threads, locales, LTO, and all target libraries.
Only libgcc is built with a shared library. Other target libraries, including
libstdc++, are built as static libraries only.

 $ cd gcc-build
 $ BUILD=$(../gcc-6.1.0/config.guess | sed -e 's/-pc-/-buildpc-/')

 $ ../gcc-6.1.0/configure --prefix="${TOOLS_DIR}" --build=${BUILD} \
     --target=i486-pc-linux-gnu --enable-languages=c,c++ \
     --enable-shared=libgcc --enable-threads=posix --enable-clocale=gnu \
     --enable-lto --disable-bootstrap --disable-multilib \
     --with-sysroot="${SYSROOT_DIR}" --with-arch-32=i486 --with-tune=generic
 $ make
 $ make install-strip
 $ make -k distclean
 $ rm -r *

 $ ../gcc-6.1.0/configure --prefix="${TOOLS_DIR}" --build=${BUILD} \
     --target=x86_64-pc-linux-gnu --enable-languages=c,c++ \
     --enable-shared=libgcc --enable-threads=posix --enable-clocale=gnu \
     --enable-lto --disable-bootstrap --disable-multilib \
     --with-sysroot="${SYSROOT64_DIR}" --with-arch-32=i486 --with-tune=generic
 $ make
 $ make install-strip
 $ make -k distclean
 $ rm -r *

 $ cd ..

Notes:
* __cxa_atexit should have been enabled by default for glibc. There's no need
  to explicitly specify '--enable-__cxa_atexit'.

Final tuning
------------

Copy libgcc_s.so.1 from 'tools' directory to the target's 'sysroot' directory,
because GCC's makefile doesn't do this automatically when installing:

 $ cp -Pp "${TOOLS_DIR}"/i486-pc-linux-gnu/lib/libgcc_s.so* \
     "${SYSROOT_DIR}/lib"
 $ cp -Pp "${TOOLS_DIR}"/x86_64-pc-linux-gnu/lib64/libgcc_s.so* \
     "${SYSROOT64_DIR}/lib64"

GCC does not make binutils aware of GCC's LTO feature, so some programs (namely
ar, nm and ranlib) don't work with object codes compiled with LTO. Although GCC
provides wrapper programs (gcc-ar, gcc-nm, gcc-ranlib) to launch the LTO plugin
with the programs, it is better to let them load the plugin automatically,
without wrappers. Create a symlink in "lib/bfd-plugins" to achieve this:

 $ mkdir "${TOOLS_DIR}/lib/bfd-plugins"
 $ cd "${TOOLS_DIR}/lib/bfd-plugins"
 $ ln -s ../../libexec/gcc/x86_64-pc-linux-gnu/6.1.0/liblto_plugin.so.0.0.0 \
     liblto_plugin.so

Stripping binaries (Optional)
-----------------------------

The ".so" binary files in CPUstress are stripped binaries.

 $ cd "${SYSROOT_DIR}/lib"
 $ i486-pc-linux-gnu-strip --strip-unneeded libgcc_s.so.1 *-2.19.so
 $ cd "${SYSROOT64_DIR}/lib64"
 $ x86_64-pc-linux-gnu-strip --strip-unneeded libgcc_s.so.1 *-2.19.so

Change mode bits (Optional)
---------------------------

 $ cd "${SYSROOT_DIR}/lib"
 $ chmod 644 *-2.19.so
 $ chmod 755 ld-2.19.so libc-2.19.so libpthread-2.19.so
 $ cd "${SYSROOT64_DIR}/lib64"
 $ chmod 644 *-2.19.so
 $ chmod 755 ld-2.19.so libc-2.19.so libpthread-2.19.so

 $ cd ../../..

--Explorer <explorer09@gmail.com>
