1 January 2017

The BusyBox binary is compiled on Ubuntu 12.04.5 LTS (32-bit), with a custom
cross-toolchain described in "toolchain.txt". Before compiling, make sure you
have the toolchain built already and the PATH variable containing the 'bin'
directory of the toolchain:

 $ export PATH="${TOOLS_DIR}/bin:${PATH}"

Download BusyBox source code and the official patches:
http://busybox.net/downloads/busybox-1.26.0.tar.bz2
(At the time of the writing, there were no official patches for 1.26.0. You can
can check the official patches at
<http://busybox.net/downloads/fixes-1.26.0/>.)

The BusyBox binary in CPUstress also includes the 'acpi' applet, which is not
yet available in the official source release. The source code and patch for
'acpi' ("busybox-acpi.patch") was obtained here:
http://lists.busybox.net/pipermail/busybox/2014-December/082065.html

Unpack the code:

 $ tar -x -v --bzip2 -f busybox-1.26.0.tar.bz2

Copy the file "config" and the ".patch" files into the source code directory.
Then apply the patches and the config:

 $ cd busybox-1.26.0
 $ patch -p 1 <busybox-acpi.patch
 $ patch -p 1 <busybox-acpi-2.patch

 $ mv config .config

Notes:
* We specifically build the 'kill' applet in BusyBox even though the command is
  supported as 'ash' builtin, because we want to include its help text. There
  are also help text for 'echo' and 'printf' in BusyBox, but we don't include
  them for a few reasons: They are built to be primitive in CPUstress, their
  main use are in shell scripts and seldom by user, and their behaviors of
  "--help" option are no standard.
* This build enables Link Time Optimization (-flto) from gcc to produce a
  smaller binary.

BusyBox's internal FAST_FUNC macro can obstruct the optimizations of functions
by GCC's LTO, making the binaries slightly larger than optimal. Disable it:

 $ sed -i.bak -e 's#__attribute__((regparm(3),stdcall))#/* & */#' \
     include/platform.h

Finally, build BusyBox:

 $ make CROSS_COMPILE="i486-pc-linux-gnu-"
 $ make CROSS_COMPILE="i486-pc-linux-gnu-" install

The binary will be ready in a directory named "_install" inside the BusyBox
source, as well as the necessary symlinks. BusyBox doesn't create the symlink
"/init" which is needed for an initramfs image, so create it manually:

 $ cd _install
 $ ln -s bin/busybox init

--Explorer <explorer09@gmail.com>
