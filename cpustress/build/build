#!/bin/sh
#
#
# Licensed under the GNU General Public License, version 2 or later.
# This program comes with ABSOLUTELY NO WARRANTY. See the GNU GPL for details:
# <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html>
#
# Written by Explorer.
# Last updated on 2 January 2017.

# Change working directory to the directory of the script.
cd `dirname $0`

# Execute the prepare script when needed.
if [ ! -d "build-initrd/dev" ]; then
    echo "Executing ./prepare ..."
    sh ./prepare
    if [ "$?" -ne 0 ]; then
        exit 1
    fi
fi

# Check that important directories exist, so that we won't build an empty and
# useless initramfs image.
HAS_ERRORS=false
for d in bin dev etc lib proc sbin sys tmp usr; do
    if [ ! -d "build-initrd/$d" ]; then
        echo "ERROR: Directory '$d' is missing." >&2
        HAS_ERRORS=true
    fi
done

if [ "$HAS_ERRORS" = "true" ]; then
    echo "There are important directories missing from 'build-initrd'. Aborting." >&2
    exit 1
fi

# Check cpio.
# I support only GNU cpio and bsdcpio. Others such as Solaris cpio simply
# won't work here.
case `cpio --version | sed -n -e '1 p'` in
    *GNU* | *bsdcpio*)
        ;;
    *)
        echo "ERROR: This script needs a GNU cpio or bsdcpio." >&2
        exit 1
esac

if [ -e "initrd.xz.old" ]; then
    rm -Ri initrd.xz.old
fi
if [ -e "initrd.xz" ]; then
    mv initrd.xz initrd.xz.old
fi

cd build-initrd

# Prepare the ignore list.
# Some VCS, notably Subversion, may create hidden directories all over the
# place. I have to ignore instead of remove them.
# http://www.gnu.org/software/tar/manual/html_section/exclude.html
FILELIST_SED='
/\.#/ d
/~$/ d
/CVS\// d
/RCS\// d
/SCCS\// d
/\.cvsignore/ d
/\.svn/ d
/\.git/ d
/\.bzr/ d
/\.hg/ d
'

echo "Making cpio archive..."

# Notes:
# -H (synonym of --format) does not work with old bsdcpio.
# --owner (synonym of -R) might be GNU-only.
find . \( -type d -exec printf '%s/\n' '{}' \; \) -o -print |
    LC_ALL=C sort |
    sed -e "$FILELIST_SED" |
    cpio -o --format newc -R 0:0 >../initrd
STATUS=$?

if [ "$STATUS" -ne "0" ]; then
    echo "ERROR: cpio error with exit code ${STATUS}." >&2
    exit 1
fi

cd ..

echo "Compressing..."

# Notes:
# The kernel xz decompressor supports --check=crc32 but not --check=crc64
# (the xz default).
# When decompressing initramfs, the kernel dynamically allocates memory for
# dictionary. Because the size it saves in the compressed image is very little
# comparing to dictionary size increased, I have to set the size to as small
# as possible. 64KiB is the largest I can use while keeping the minimum
# decompression memory (tested with the xz userspace program, not with a
# kernel decompressor.)
xz --check=crc32 --x86 --lzma2=dict=64KiB -v initrd
STATUS=$?
if [ "$STATUS" -ne "0" ]; then
    echo "ERROR: xz error with exit code ${STATUS}." >&2
    exit $STATUS
fi

rm -f initrd

echo "Done."

exit 0
