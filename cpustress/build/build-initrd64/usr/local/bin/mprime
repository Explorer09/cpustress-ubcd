#!/bin/sh
#
# Wrapper for the Mersenne Prime torture test (mprime)
# ====================================================
#
# 'mprime' is a wrapper that does the following tasks:
# 1. Shows the user the options to configure the torture test.
# 2. Creates temporary working directories when needed.
# See '/opt/mprime/mprime.txt' for details.
#
#
# Licensed under the GNU General Public License, version 2 or later.
# This program comes with ABSOLUTELY NO WARRANTY. See the GNU GPL for details:
# <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html>
#
# Written by Gert Hulselmans and Explorer.
# Last updated on 4 December 2016.


set -m
CPUS=`awk '/^processor/ {CPU=$3}; END {print CPU+1}' /proc/cpuinfo`
SSE2=`awk '/sse2/ {print "Y"; exit}' /proc/cpuinfo`
AVX=`awk '/avx/ {print "Y"; exit}' /proc/cpuinfo`
MEMTOTAL=`awk '/^MemTotal/ {print $2}' /proc/meminfo`
# Convert KiB to MiB
MEMTOTAL=$((MEMTOTAL/1024))

read_num () {
    printf "$1 [$2]: "
    while :; do
        read REPLY
        if [ "X$REPLY" = X ]; then
            REPLY="$2"
            return
        fi
        if [ "$REPLY" -ge "$3" ] 2>/dev/null && [ "$REPLY" -le "$4" ]; then
            return
        fi
        printf "Please enter a value between $3 and $4 [default=$2]: "
    done
}

mkdir -p /tmp/mprime
[ -d /tmp/mprime ] || exit 1

printf "\033[0;32mMersenne Prime torture test (64-bit):\n"
printf "=====================================\033[0m\n\n"

# 2: '-t', single instance of mprime.
# 1: No '-t', single instance of mprime, no torture test config.
MODE=2

VER=0
CONFIG=Y
TEMPDIR=AUTO

# Parse command-line arguments.
ARGS=""
while [ "X$1" != X ]; do
    case "$1" in
        --help | -[Hh\?]*)
            if [ "$VER" = 0 ]; then
                cat << HELP
Usage: $0 [OPTIONS...]

--noconfig  Skip the touture test configuration.
--tempdir   Create a temporary working directory and run mprime from there.
-h          Print this.
-m          Menu to configure mprime.
-v          Print the version number.
-t          Run the torture test.
-aN         Use an alternate set of INI and output files (obsolete).
-wDIR       Run from a different working directory.

To specify how many torture test threads to run, export the 'instances' shell
variable before running this script. e.g. 'export instances=1'
HELP
                exit 0
            else
                MODE=1 TEMPDIR=N ARGS="$ARGS -h"
            fi
            ;;
        28)
            VER=28
            ;;
        [0-9]*) # Wrong version. Silently ignore.
            ;;
        --noconfig)
            CONFIG=N
            ;;
        --tempdir)
            [ "$TEMPDIR" != N ] && TEMPDIR=Y
            ;;
        -[WwAa]*)
            [ "$MODE" -gt 2 ] && MODE=2
            CONFIG=N TEMPDIR=N ARGS="$ARGS $1"
            ;;
        -[TtCcMmSsDd]*)
            MODE=1 ARGS="$ARGS $1"
            ;;
        *)
            MODE=1 TEMPDIR=N ARGS="$ARGS $1"
            ;;
    esac
    shift
done

[ "$instances" -gt 0 ] 2>/dev/null || instances=0

AWK_SUB=""
MAXFFT_MAX=4096
BLENDMEMORY=8

if [ "$instances" = 0 ]; then
    instances="$CPUS"
    echo "Detecting the number of CPUs: $CPUS detected."
else
    if [ "$instances" -gt 512 ]; then
        echo "Warning: Maximum number of worker threads supported is 512." >&2
        instances=512
    fi
    AWK_SUB="sub(/^(; )?TortureThreads[^\n]*\$/, \"TortureThreads=$instances\");"
fi
if [ "$MODE" -gt 1 ] && [ "$CONFIG" = Y ]; then
    AWK_SUB="sub(/^(; )?TortureThreads[^\n]*\$/, \"TortureThreads=$instances\");"
    if [ "$instances" -eq 1 ]; then
        echo "1 touture test thread will be run."
    else
        echo "$instances touture test threads will be run."
    fi
fi
if [ "X$AVX" = XY ]; then
    MINFFT_MIN=0 MAXFFT_MIN=1
else
    MINFFT_MIN=7 MAXFFT_MIN=7
fi
if [ "X$SSE2" = XY ]; then
    MAXFFT_MAX=32768
fi
if [ "$MEMTOTAL" -ge 2000 ]; then
    BLENDMEMORY=1600
elif [ "$MEMTOTAL" -ge 500 ]; then
    BLENDMEMORY=$(($MEMTOTAL-256))
elif [ "$MEMTOTAL" -ge 200 ]; then
    BLENDMEMORY=$(($MEMTOTAL/2))
fi
MEMORY_MAX="$MEMTOTAL"
TIMEFFT=3
PRIME_INI=prime.txt

cd /opt/mprime/28

# Configure torture test.
if [ "$MODE" -gt 1 ] && [ "$CONFIG" = Y ]; then
    ps | awk '/mprime/ && (! /awk|sh/) {
        print "Warning: Another instance of mprime is running. Your configuration might get"
        print "overwritten."; exit}' >&2
    cat << TORTURE_TYPE
Choose a type of torture test to run.
  1) Small FFTs (maximum heat and FPU stress, data fits in L2 cache, RAM not
     tested much).
  2) In-place large FFTs (maximum heat and power consumption, some RAM tested).
  3) Blend (tests some of everything, lots of RAM tested).
Blend is the default.  NOTE: if you fail the blend test, but can pass the small
FFT test then your problem is likely bad memory or a bad memory controller.
TORTURE_TYPE
    read_num "Type of torture test to run" 3 1 3
    case "$REPLY" in
        1) MINFFT=8   MAXFFT=64   TORTURE_MEM=0 ;;
        2) MINFFT=128 MAXFFT=1024 TORTURE_MEM=0 ;;
        3) MINFFT=8   MAXFFT=4096 TORTURE_MEM="$BLENDMEMORY" ;;
    esac
    printf "Min FFT Size: %5dK" "$MINFFT"
    if [ "$TORTURE_MEM" -le 8 ]; then
        printf "  Memory to use:           (in-place FFTs)\n"
    else
        printf "  Memory to use: %5dMiB, %5dMiB/thread\n" "$TORTURE_MEM" $((TORTURE_MEM/instances))
    fi
    printf "Max FFT size: %5dK  Time to run each FFT size: %5d minutes\n" "$MAXFFT" "$TIMEFFT"
    while :; do
        printf "Fine tune the selection [y/N]? "
        read REPLY
        case "$REPLY" in
            [Yy]) REPLY=Y; break ;;
            "" | [Nn]) break ;;
        esac
    done
    if [ "X$REPLY" = XY ]; then
        read_num "Min FFT size (in K)" "$MINFFT" "$MINFFT_MIN" "$MAXFFT_MAX"
        MINFFT="$REPLY"
        read_num "Max FFT size (in K)" "$MAXFFT" "$MAXFFT_MIN" "$MAXFFT_MAX"
        MAXFFT="$REPLY"
        if [ "$BLENDMEMORY" -gt 8 ]; then
            read_num "Memory to use (in MiB, 0 = in-place FFTs)" "$TORTURE_MEM" 0 "$MEMORY_MAX"
            TORTURE_MEM="$REPLY"
        fi
        read_num "Time to run each FFT size (in minutes)" "$TIMEFFT" 1 60
        TIMEFFT="$REPLY"
    fi
    TORTURE_MEM=$((TORTURE_MEM/instances))
    awk "{sub(/^(; )?MinTortureFFT[^\n]*\$/, \"MinTortureFFT=$MINFFT\");
          sub(/^(; )?MaxTortureFFT[^\n]*\$/, \"MaxTortureFFT=$MAXFFT\");
          sub(/^(; )?TortureMem[^\n]*\$/, \"TortureMem=$TORTURE_MEM\");
          sub(/^(; )?TortureTime[^\n]*\$/, \"TortureTime=$TIMEFFT\");
          $AWK_SUB print}" $PRIME_INI >$PRIME_INI.tmp
    mv -f $PRIME_INI.tmp $PRIME_INI
elif [ "$TEMPDIR" != N ] && [ "X$AWK_SUB" != X ]; then
    awk "{$AWK_SUB print}" $PRIME_INI >$PRIME_INI.tmp
    mv -f $PRIME_INI.tmp $PRIME_INI
fi

# Launch mprime
[ "$MODE" -eq 2 ] && ARGS=" -t$ARGS"
if [ "$TEMPDIR" = Y ]; then
    WORKING_DIR=`mktemp -d -p /tmp/mprime XXXXXX`
    cp $PRIME_INI $WORKING_DIR
    ARGS="$ARGS -w$WORKING_DIR"
fi
echo "Running 1 instance of mprime ('/opt/mprime/28/mprime$ARGS')."
exec ./mprime$ARGS
